[{"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\index.js":"1","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\App.js":"2","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Header.js":"4","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Footer.js":"5","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Product.js":"7","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Rating.js":"8","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductScreen.js":"9","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\store.js":"10","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\productReducers.js":"11","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\productConstants.js":"12","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Loader.js":"13","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Message.js":"14","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\CartScreen.js":"15","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\cartReducers.js":"16","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\cartConstants.js":"17","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\rootRuducer.js":"18","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\userReducers.js":"19","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\userConstants.js":"20","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\LoginScreen.js":"21","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\FormContainer.js":"22","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\RegisterScreen.js":"23","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProfileScreen.js":"24","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ShippingScreen.js":"25","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\CheckoutSteps.js":"26","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\PaymentScreen.js":"27","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\PlaceOrderScreen.js":"28","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\orderReducers.js":"29","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\orderConstants.js":"30","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\orderActions.js":"31","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\cartActions.js":"32","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\userActions.js":"33","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\productActions.js":"34","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\OrderScreen.js":"35","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\UserListScreen.js":"36","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\UserEditScreen.js":"37","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductListScreen.js":"38","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductEditScreen.js":"39","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\NotFoundScreen.js":"40","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\OrderListScreen.js":"41","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\SearchBox.js":"42","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Paginate.js":"43","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\ProductCarousel.js":"44","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Meta.js":"45"},{"size":593,"mtime":1610270956002,"results":"46","hashOfConfig":"47"},{"size":2662,"mtime":1612076599628,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":499162500000,"results":"49","hashOfConfig":"47"},{"size":3502,"mtime":1611849188814,"results":"50","hashOfConfig":"47"},{"size":1969,"mtime":1611150307787,"results":"51","hashOfConfig":"47"},{"size":2057,"mtime":1612802311405,"results":"52","hashOfConfig":"47"},{"size":1035,"mtime":1610287716708,"results":"53","hashOfConfig":"47"},{"size":2308,"mtime":1610116403040,"results":"54","hashOfConfig":"47"},{"size":11576,"mtime":1612970133159,"results":"55","hashOfConfig":"47"},{"size":953,"mtime":1610811315263,"results":"56","hashOfConfig":"47"},{"size":4164,"mtime":1612254124667,"results":"57","hashOfConfig":"47"},{"size":1646,"mtime":1612254019816,"results":"58","hashOfConfig":"47"},{"size":926,"mtime":1611151701423,"results":"59","hashOfConfig":"47"},{"size":315,"mtime":1610474401072,"results":"60","hashOfConfig":"47"},{"size":4685,"mtime":1611152111778,"results":"61","hashOfConfig":"47"},{"size":1355,"mtime":1610806803509,"results":"62","hashOfConfig":"47"},{"size":236,"mtime":1610728747085,"results":"63","hashOfConfig":"47"},{"size":1672,"mtime":1612710515747,"results":"64","hashOfConfig":"47"},{"size":4001,"mtime":1612776226171,"results":"65","hashOfConfig":"47"},{"size":1525,"mtime":1612775613315,"results":"66","hashOfConfig":"47"},{"size":2602,"mtime":1612969696462,"results":"67","hashOfConfig":"47"},{"size":373,"mtime":1610464731552,"results":"68","hashOfConfig":"47"},{"size":3213,"mtime":1610810469414,"results":"69","hashOfConfig":"47"},{"size":7586,"mtime":1612798671037,"results":"70","hashOfConfig":"47"},{"size":3344,"mtime":1611160246033,"results":"71","hashOfConfig":"47"},{"size":1447,"mtime":1610727819743,"results":"72","hashOfConfig":"47"},{"size":1816,"mtime":1611761730663,"results":"73","hashOfConfig":"47"},{"size":7504,"mtime":1612716671176,"results":"74","hashOfConfig":"47"},{"size":4565,"mtime":1612775524470,"results":"75","hashOfConfig":"47"},{"size":1442,"mtime":1612775470388,"results":"76","hashOfConfig":"47"},{"size":6542,"mtime":1612710609496,"results":"77","hashOfConfig":"47"},{"size":1354,"mtime":1610811612508,"results":"78","hashOfConfig":"47"},{"size":7581,"mtime":1612971574230,"results":"79","hashOfConfig":"47"},{"size":5249,"mtime":1612725420189,"results":"80","hashOfConfig":"47"},{"size":11381,"mtime":1612775680707,"results":"81","hashOfConfig":"47"},{"size":4810,"mtime":1612722644684,"results":"82","hashOfConfig":"47"},{"size":4088,"mtime":1612799654370,"results":"83","hashOfConfig":"47"},{"size":6311,"mtime":1612722545215,"results":"84","hashOfConfig":"47"},{"size":7702,"mtime":1612800136888,"results":"85","hashOfConfig":"47"},{"size":182,"mtime":1611419287684,"results":"86","hashOfConfig":"47"},{"size":3357,"mtime":1611462418655,"results":"87","hashOfConfig":"47"},{"size":961,"mtime":1611849367849,"results":"88","hashOfConfig":"47"},{"size":888,"mtime":1611917481984,"results":"89","hashOfConfig":"47"},{"size":1379,"mtime":1612258972991,"results":"90","hashOfConfig":"47"},{"size":591,"mtime":1612801957270,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1a4p9ch",{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\index.js",[],["189","190"],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\App.js",["191"],"import { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'react-bootstrap'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport HomeScreen from './screens/HomeScreen'\nimport ProductScreen from './screens/ProductScreen'\nimport CartScreen from './screens/CartScreen'\nimport LoginScreen from './screens/LoginScreen'\nimport RegisterScreen from './screens/RegisterScreen'\nimport ProfileScreen from './screens/ProfileScreen'\nimport ShippingScreen from './screens/ShippingScreen'\nimport PaymentScreen from './screens/PaymentScreen'\nimport PlaceOrderScreen from './screens/PlaceOrderScreen'\nimport OrderScreen from './screens/OrderScreen'\nimport UserListScreen from './screens/UserListScreen'\nimport UserEditScreen from './screens/UserEditScreen'\nimport ProductListScreen from './screens/ProductListScreen'\nimport ProductEditScreen from './screens/ProductEditScreen'\nimport NotFoundScreen from './screens/NotFoundScreen'\nimport OrderListScreen from './screens/OrderListScreen'\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <main className='py-3'>\n        <Container>\n          <Route path='/order/:id' component={OrderScreen}></Route>\n          <Route path='/shipping' component={ShippingScreen}></Route>\n          <Route path='/payment' component={PaymentScreen}></Route>\n          <Route path='/place_order' component={PlaceOrderScreen}></Route>\n          <Route path='/login' component={LoginScreen}></Route>\n          <Route path='/register' component={RegisterScreen}></Route>\n          <Route path='/profile' component={ProfileScreen}></Route>\n          <Route path='/product/:id' component={ProductScreen} />\n          <Route path='/cart/:id?' component={CartScreen}></Route>\n          <Route path='/admin/user_list' component={UserListScreen}></Route>\n          <Route path='/admin/user/:id/edit' component={UserEditScreen}></Route>\n          <Route path='/admin/product_list' component={ProductListScreen} exact></Route>\n          <Route path='/admin/product_list/:pageNumber' component={ProductListScreen} exact></Route>\n          <Route path='/admin/product/:id/edit' component={ProductEditScreen}></Route>\n          <Route path='/admin/order_list' component={OrderListScreen}></Route>\n          <Route path='/search/:keyword' component={HomeScreen} />\n          <Route path='/page/:pageNumber' component={HomeScreen} exact />\n          <Route path='/search/:keyword/page/:pageNumber' component={HomeScreen} exact />\n          <Route path='/' component={HomeScreen} exact />\n        </Container>\n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Header.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\HomeScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Product.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\store.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Message.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\cartConstants.js",[],["192","193"],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\rootRuducer.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProfileScreen.js",["194"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Swal from 'sweetalert2'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { listMyOrders, deleteOrder } from '../actions/orderActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listMyOrders())\r\n      if (!user || !user.name || success) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n        dispatch(getUserDetails('profile'))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n      }\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, userInfo, user, success])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmPassword) {\r\n      setMessage('Passwords do not match')\r\n    }\r\n    else {\r\n      Swal.fire(\r\n        'Success!',\r\n        'Profile Updated!',\r\n        'success'\r\n      )\r\n      dispatch(updateUserProfile({ id: user._id, name, email, password }))\r\n      setMessage('')\r\n    }\r\n  }\r\n\r\n  const deleteHandler = (id) => {\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n      customClass: {\r\n        confirmButton: 'btn btn-success',\r\n        cancelButton: 'btn btn-danger'\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n\r\n    swalWithBootstrapButtons.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Delete it!',\r\n      cancelButtonText: 'Cancel!',\r\n      reverseButtons: false\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        await dispatch(deleteOrder(id))\r\n        await dispatch(listMyOrders())\r\n        swalWithBootstrapButtons.fire(\r\n          'Deleted!',\r\n          'Your order has been deleted.',\r\n          'success'\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {message && <Message variant='danger'>{message}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n        ) : (\r\n              <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='name'>\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control\r\n                    type='name'\r\n                    placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                  <Form.Label>Email Address</Form.Label>\r\n                  <Form.Control\r\n                    type='email'\r\n                    placeholder='Enter email'\r\n                    value={email}\r\n                    disabled\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control\r\n                    type='password'\r\n                    placeholder='Enter password'\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='confirmPassword'>\r\n                  <Form.Label>Confirm Password</Form.Label>\r\n                  <Form.Control\r\n                    type='password'\r\n                    placeholder='Confirm password'\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  type='submit'\r\n                  variant='primary'\r\n                  disabled={password.length < 6 && confirmPassword.length < 6}\r\n                >\r\n                  Update\r\n            </Button>\r\n              </Form>\r\n            )}\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2>My Orders</h2>\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Message variant='danger'>{errorOrders}</Message>\r\n        ) : (\r\n              <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>DATE</th>\r\n                    <th>TOTAL</th>\r\n                    <th>PAID</th>\r\n                    <th>DELIVERED</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {orders.map((order) => (\r\n                    <tr key={order._id}>\r\n                      <td>{order._id}</td>\r\n                      <td>{order.createdAt.substring(0, 10)}</td>\r\n                      <td>{order.totalPrice}</td>\r\n                      <td>\r\n                        {order.isPaid ? (\r\n                          order.paidAt.substring(0, 10)\r\n                        ) : (\r\n                            <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                          )}\r\n                      </td>\r\n                      <td>\r\n                        {order.isDelivered ? (\r\n                          order.deliveredAt.substring(0, 10)\r\n                        ) : (\r\n                            <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                          )}\r\n                      </td>\r\n                      <td>\r\n                        <LinkContainer to={`/order/${order._id}`}>\r\n                          <Button className='btn-sm' variant='info'>\r\n                            Details\r\n                          </Button>\r\n                        </LinkContainer>\r\n                        <Button\r\n                          variant=\"danger\"\r\n                          className=\"btn-sm\"\r\n                          onClick={() => deleteHandler(order._id)}\r\n                          disabled={order.isPaid}\r\n                        >\r\n                          <i className=\"fas fa-trash\"></i>\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\PaymentScreen.js",["195"],"import React, { useState } from 'react'\r\nimport { Col, Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\nfunction PaymentScreen({ history }) {\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    if (!userInfo) {\r\n        history.push('/login')\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        history.push('/login?redirect=place_order')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormContainer>\r\n                <CheckoutSteps step1 step2 step3 />\r\n                <h1>Payment Method</h1>\r\n                <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='country'>\r\n                        <Form.Label as='legend'>Select Method</Form.Label>\r\n                        <Col>\r\n                            <Form.Check\r\n                                type='radio'\r\n                                label='PayPal or Credit Card'\r\n                                id='PayPal'\r\n                                name='paymentMethod'\r\n                                value='PayPal'\r\n                                checked\r\n                            ></Form.Check>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Button type='submit' variant='primary'>Continue</Button>\r\n                </Form>\r\n            </FormContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\PlaceOrderScreen.js",["196"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nfunction PlaceOrderScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    if (!cart.shippingAddress.address) {\r\n        history.push('/shipping')\r\n    } else if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    cart.itemsPrice = addDecimals(\r\n        cart.cartItems.reduce(\r\n            (acc, item) => acc + item.price * item.qty,\r\n            0\r\n        )\r\n    )\r\n\r\n    cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n    cart.taxPrice = addDecimals(Number((0.1 * cart.itemsPrice).toFixed(2)))\r\n    cart.totalPrice = (\r\n        Number(cart.itemsPrice) +\r\n        Number(cart.shippingPrice) +\r\n        Number(cart.taxPrice)\r\n    ).toFixed(2)\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, success, error } = orderCreate\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            //window.location.reload()\r\n        }\r\n\r\n    }, [history, success])\r\n\r\n    const placeOrderHandler = async () => {\r\n        await dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice\r\n        }))\r\n        sessionStorage.removeItem('cartItems')\r\n        cart.cartItems = [];\r\n        dispatch({ type: ORDER_CREATE_RESET })\r\n    }\r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {cart.shippingAddress.address},\r\n                                {' '}{cart.shippingAddress.city},\r\n                                {' '}{cart.shippingAddress.postalCode},\r\n                                {' '}{cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method </h2>\r\n                            <strong>Method: </strong>\r\n                            {cart.paymentMethod}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant=\"danger\">Your cart is empty</Message> :\r\n                                (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image}\r\n                                                            alt={item.name}\r\n                                                            fluid\r\n                                                            rounded\r\n                                                        />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>\r\n                                                            {item.name}\r\n                                                        </Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )\r\n                            }\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>\r\n                                        ${cart.itemsPrice}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>\r\n                                        ${cart.shippingPrice}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>\r\n                                        ${cart.taxPrice}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>\r\n                                        ${cart.totalPrice}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button type=\"button\" className=\"btn-block\" disabled={cart.cartItems.length === 0} onClick={placeOrderHandler}>\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\orderActions.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\OrderScreen.js",["197"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, loading, error } = orderDetails\r\n\r\n    const orderPay = useSelector((state) => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector((state) => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    if (!loading) {\r\n        //   Calculate prices\r\n        const addDecimals = (num) => {\r\n            return (Math.round(num * 100) / 100).toFixed(2)\r\n        }\r\n\r\n        order.itemsPrice = addDecimals(\r\n            order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        const addPayPalScript = async () => {\r\n            const { data: clientId } = await axios.get('/api/config/paypal')\r\n            const script = document.createElement('script')\r\n            script.type = 'text/javascript'\r\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n            script.async = true\r\n            script.onload = () => {\r\n                setSdkReady(true)\r\n            }\r\n            document.body.appendChild(script)\r\n        }\r\n\r\n        if (!order || successPay || order._id !== orderId || successDeliver) {\r\n            dispatch({\r\n                type: ORDER_PAY_RESET\r\n            })\r\n            dispatch({\r\n                type: ORDER_DELIVER_RESET\r\n            })\r\n            dispatch(getOrderDetails(orderId))\r\n        }\r\n        else {\r\n            if (!order.isPaid) {\r\n                if (!window.paypal) {\r\n                    addPayPalScript()\r\n                }\r\n                else {\r\n                    setSdkReady(true)\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [dispatch, orderId, successPay, successDeliver, order])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        console.log(paymentResult)\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    return (\r\n\r\n        loading ?\r\n            <Loader /> :\r\n            error ?\r\n                <Message variant='danger'>{error}</Message> :\r\n\r\n                <>\r\n                    <h1>Order {order._id}</h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p>\r\n                                        <strong>Name: </strong>\r\n                                        {order.user.name}\r\n                                    </p>\r\n\r\n                                    <p> <strong>Email: </strong>\r\n                                        <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                                    </p>\r\n\r\n                                    <p>\r\n                                        <strong>Address: </strong>\r\n                                        {order.shippingAddress.address},\r\n                                {' '}{order.shippingAddress.city},\r\n                                {' '}{order.shippingAddress.postalCode},\r\n                                {' '}{order.shippingAddress.country}\r\n                                    </p>\r\n                                    {\r\n                                        order.isDelivered ?\r\n                                            <Message variant='success'>Delivered on {order.deliveredAt}</Message> :\r\n                                            <Message variant='danger'>Not Delivered</Message>\r\n                                    }\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method </h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {\r\n                                        order.isPaid ?\r\n                                            <Message variant='success'>Paid on {order.paidAt}</Message> :\r\n                                            <Message variant='danger'>Not Paid</Message>\r\n                                    }\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.orderItems.length === 0 ? <Message>Your cart is empty</Message> :\r\n                                        (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.orderItems.map((item, index) => (\r\n                                                    <ListGroup.Item key={index}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.image}\r\n                                                                    alt={item.name}\r\n                                                                    fluid\r\n                                                                    rounded\r\n                                                                />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.product}`}>\r\n                                                                    {item.name}\r\n                                                                </Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4}>\r\n                                                                {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )\r\n                                    }\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items</Col>\r\n                                            <Col>\r\n                                                ${order.itemsPrice}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping</Col>\r\n                                            <Col>\r\n                                                ${order.shippingPrice}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax</Col>\r\n                                            <Col>\r\n                                                ${order.taxPrice}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total</Col>\r\n                                            <Col>\r\n                                                ${order.totalPrice}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                    {!order.isPaid && !userInfo.isAdmin && (\r\n                                        <ListGroup.Item>\r\n                                            {loadingPay && <Loader />}\r\n                                            {!sdkReady ? <Loader /> : (\r\n                                                <PayPalButton\r\n                                                    amount={order.totalPrice}\r\n                                                    onSuccess={successPaymentHandler}\r\n                                                />\r\n                                            )}\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                    {loadingDeliver && <Loader />}\r\n                                    {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                        <ListGroup.Item>\r\n                                            <Button\r\n                                                type=\"button\"\r\n                                                className=\"btn btn-block\"\r\n                                                onClick={deliverHandler}\r\n                                            >\r\n                                                Mark as delivered\r\n                                    </Button>\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                </ListGroup>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n    )\r\n}\r\n\r\nexport default OrderScreen\r\n","C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\UserListScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\UserEditScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductListScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\ProductEditScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\NotFoundScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\screens\\OrderListScreen.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\SearchBox.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\ProductCarousel.js",[],"C:\\Users\\Sy\\Desktop\\shopping\\frontend\\src\\components\\Meta.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":19,"column":8,"nodeType":"204","messageId":"205","endLine":19,"endColumn":22},{"ruleId":"198","replacedBy":"206"},{"ruleId":"200","replacedBy":"207"},{"ruleId":"202","severity":1,"message":"208","line":2,"column":8,"nodeType":"204","messageId":"205","endLine":2,"endColumn":13},{"ruleId":"202","severity":1,"message":"209","line":9,"column":27,"nodeType":"204","messageId":"205","endLine":9,"endColumn":43},{"ruleId":"210","severity":1,"message":"211","line":47,"column":8,"nodeType":"212","endLine":47,"endColumn":26,"suggestions":"213"},{"ruleId":"210","severity":1,"message":"214","line":80,"column":8,"nodeType":"212","endLine":80,"endColumn":62,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'NotFoundScreen' is defined but never used.","Identifier","unusedVar",["216"],["217"],"'axios' is defined but never used.","'setPaymentMethod' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["218"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},"Update the dependencies array to be: [history, order._id, success]",{"range":"224","text":"225"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"226","text":"227"},[1561,1579],"[history, order._id, success]",[2709,2763],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]"]